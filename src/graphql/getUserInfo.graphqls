type Query {
  getUserInfo(input: GetUserInfoInput!): UserInfo!
  paths: [Path]
  isLogged: IsLoggedInfo!
}

type IsLoggedInfo {
  isLogged: Boolean!
  userID: String
}

type Mutation {
  login(input: LoginInput!): String!
  searchUser(input: SearchUserInput!): String!
}

type Path {
  name: String!
  coordinates: String!
}

type UserInfo {
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  bio: String
  authenticated: String!
  createdAt: String!
  isFollowing: Boolean!
  userID: Int!
  following: [UserInfoMinimal]
  followers: [UserInfoMinimal]
  collections: [Collection]
}

type UserInfoMinimal {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

type Collection {
  collectionName: String!
  createdAt: String!
  description: String!
}

input GetUserInfoInput {
  username: String!
}

input SearchUserInput {
  username: String!
}

input LoginInput {
  username: String!
  password: String!
}
